
structure A = Absyn

%%

%term
    EOF
  | INT of int
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | EQ
  | GT
  | GE
  | LT
  | LE
  | LPAREN
  | RPAREN
  | LET
  | VAR
  | ASSIGN
  | IN
  | END
  | IF
  | THEN
  | ELSE
  | FOR
  | TO
  | DO
  | SEMICOLON
  | WHILE
  | ID of string

%nonterm
    program of A.exp
  | exp of A.exp
  | dec of A.dec
  | decs of A.dec list
  | lvalue of A.var

%pos int
%verbose
%start program
%eop EOF
%noshift EOF

%keyword LET VAR IN END IF THEN ELSE FOR TO DO WHILE

%nonassoc EQ GT GE LT LE

%right SEMICOLON
%left THEN
%left ELSE
%left DO
%left ASSIGN
%left PLUS MINUS
%left TIMES DIVIDE

%name Tiger

%%

program: exp                         (exp)
decs: dec                            ([dec])
  | dec decs                         (dec :: decs)
dec: VAR ID ASSIGN exp               (A.VarDec {symbol = Symbol.createSymbol ID, init = exp, pos = VARright})
exp: ID                              (A.VarExp (A.SimpleVar (Symbol.createSymbol ID, IDleft)))
  | INT                              (A.IntExp INT)
  | MINUS exp                        (A.OpExp {left = A.IntExp 0, oper = A.MinusOp, right = exp, pos = MINUSright})
  | exp PLUS exp                     (A.OpExp {left = exp1, oper = A.PlusOp, right = exp2, pos = PLUSleft})
  | exp MINUS exp                    (A.OpExp {left = exp1, oper = A.MinusOp, right = exp2, pos = MINUSleft})
  | exp TIMES exp                    (A.OpExp {left = exp1, oper = A.TimesOp, right = exp2, pos = TIMESleft})
  | exp DIVIDE exp                   (A.OpExp {left = exp1, oper = A.DivideOp, right = exp2, pos = DIVIDEleft})
  | exp EQ exp                       (A.OpExp {left = exp1, oper = A.EqOp, right = exp2, pos = EQleft})
  | exp LT exp                       (A.OpExp {left = exp1, oper = A.LtOp, right = exp2, pos = LTleft})
  | exp LE exp                       (A.OpExp {left = exp1, oper = A.LeOp, right = exp2, pos = LEleft})
  | exp GT exp                       (A.OpExp {left = exp1, oper = A.GtOp, right = exp2, pos = GTleft})
  | exp GE exp                       (A.OpExp {left = exp1, oper = A.GeOp, right = exp2, pos = GEleft})
  | LPAREN exp RPAREN                (exp)
  | LET decs IN exp END              (A.LetExp {decs = decs, body = exp, pos = LETright})
  | IF exp THEN exp ELSE exp         (A.IfExp {test = exp1, then' = exp2, else' = SOME exp3, pos = IFright})
  | IF exp THEN exp                  (A.IfExp {test = exp1, then' = exp2, else' = NONE, pos = IFright})
  | FOR ID ASSIGN exp TO exp DO exp  (A.ForExp {var = Symbol.createSymbol ID, low = exp1, high = exp2, body = exp3, pos = FORright})
  | lvalue ASSIGN exp                (A.AssignExp {var = lvalue, exp = exp, pos = ASSIGNright})
  | LPAREN RPAREN                    (A.SeqExp [])
  | WHILE exp DO exp                 (A.WhileExp {test = exp1, body = exp2, pos = WHILEright})
  | exp SEMICOLON exp                (case exp2 of
                                        A.SeqExp [] => A.SeqExp ((exp1, exp1right) :: [(A.SeqExp [], exp2left)])
                                      | A.SeqExp exps => A.SeqExp ((exp1, exp1right) :: exps)
                                      | _ => A.SeqExp [(exp1, exp1right), (exp2, exp2right)]
                                     )

lvalue: ID                           (A.SimpleVar (Symbol.createSymbol ID, IDleft))
